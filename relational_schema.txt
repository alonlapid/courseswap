CREATE USER [Alon] FOR LOGIN [Alon] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [alonlapid]    Script Date: 10/10/2020 2:06:25 PM ******/
CREATE USER [alonlapid] FOR LOGIN [alonlapid] WITH DEFAULT_SCHEMA=[dbo]

/****** Object:  User [Kristine]    Script Date: 10/10/2020 2:06:25 PM ******/
CREATE USER [Kristine] FOR LOGIN [Kristine] WITH DEFAULT_SCHEMA=[dbo]

/****** Object:  User [Sam]    Script Date: 10/10/2020 2:06:25 PM ******/
CREATE USER [Sam] FOR LOGIN [Sam] WITH DEFAULT_SCHEMA=[dbo]
GO



CREATE  FUNCTION [dbo].[fn_canaccess](@sid int)  
RETURNS int   
AS   
  
BEGIN  
   declare @username nvarchar(256) 
   declare @ret int
   set @ret =0;
   set @username = (select Name from Student where SID = @sid)
   if(@username = CURRENT_USER or  IS_ROLEMEMBER ('db_owner') =1 )
        set @ret = 1

   RETURN @ret;       
END; 

GO
/****** Object:  Table [dbo].[Section]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Section](
	[SECID] [int] NOT NULL,
	[CID] [nvarchar](256) NULL,
	[SemesterName] [nvarchar](256) NULL,
	[SemesterYear] [int] NULL,
	[Instructor] [nvarchar](256) NULL,
	[Name] [nvarchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[SECID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Course]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Course](
	[Name] [nvarchar](256) NULL,
	[CID] [nvarchar](256) NOT NULL,
	[Points] [real] NULL,
	[Department] [nvarchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[CID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Lesson]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Lesson](
	[SECID] [int] NULL,
	[Location] [nvarchar](256) NULL,
	[Day] [char](10) NULL,
	[Hour] [real] NULL,
	[LengthInMin] [int] NULL,
UNIQUE NONCLUSTERED 
(
	[SECID] ASC,
	[Day] ASC,
	[Hour] ASC,
	[Location] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Student]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Student](
	[SID] [int] NOT NULL,
	[Name] [nvarchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[SID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Enrollment]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Enrollment](
	[EID] [int] IDENTITY(1,1) NOT NULL,
	[SID] [int] NULL,
	[SECID] [int] NULL,
	[Completed] [int] NULL,
	[EnrollmentTime] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[EID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[SECID] ASC,
	[SID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_newlesson]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_newlesson] (@sid int,@remove_secid int, @add_secid int)
RETURNS TABLE
AS
RETURN
(   
        select 
        course.CID,Lesson.* from Lesson 
        inner join Section on Section.SECID = Lesson.SECID
        inner join EnrolLment on Section.SECID = EnrolLment.SECID
        inner join Student  on Enrollment.SID = Student.SID 
        inner join course on course.CID = Section.CID 
        where Section.SECID != @remove_secid   and Student.SID = @sid
        and EnrolLment.Completed = 0 and  dbo.fn_canaccess(@sid ) =1

        union all 
        select course.CID,Lesson.* from Lesson 
        inner join Section on Section.SECID = Lesson.SECID
        inner join course on course.CID = Section.CID 
        where Section.SECID = @add_secid
        and   dbo.fn_canaccess(@sid ) =1
);

GO
/****** Object:  UserDefinedFunction [dbo].[fn_lesson]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_lesson] (@secid int)
RETURNS TABLE
AS
RETURN
(    
        select 
        Section.Name AS SectionName,Section.CID AS Course,Instructor, Location,Day,Hour,LengthInMin from Lesson 
        inner join Section on Lesson.SECID = Section.SECID 
        inner join Course on Course.CID = Section.CID 
        where Section.SECID = @secid
);
GO
/****** Object:  UserDefinedFunction [dbo].[fn_credit]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_credit] ()
RETURNS TABLE
AS
RETURN
(
  SELECT student.name as StudentName,Course.Name as CourseName,Course.CID from enrollment 
  INNER JOIN Section on Enrollment.SECID = Section.SECID 
  INNER JOIN Course on Course.CID = Section.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 1 
  and dbo.fn_canaccess(student.SID ) =1
);

GO
/****** Object:  UserDefinedFunction [dbo].[fn_enrollment]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_enrollment] ()
RETURNS TABLE
AS
RETURN
  SELECT student.SID as SudentId, student.name as StudentName,Course.Name as CourseName,Course.CID,Section.SECID  AS SECID, Section.Name AS SectionName,Section.Instructor from enrollment 
  INNER JOIN Section on Enrollment.SECID = Section.SECID 
  INNER JOIN Course on Course.CID = Section.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 0 
  and dbo.fn_canaccess(student.SID ) =1

GO
/****** Object:  UserDefinedFunction [dbo].[fn_timeconflict]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_timeconflict] (@sid int,@remove_secid int, @add_secid int)
RETURNS TABLE
AS
RETURN
(
   select L1.CID AS Course1,L1.Day  AS Lesson1_Day, L1.Hour AS Lesson1_Hour,L1.LengthInMin as Lesson1_LengthInMin ,
          L2.CID AS Course2,L2.Day  AS Lesson2_Day, L2.Hour AS Lesson2_Hour,L2.LengthInMin as Lesson2_LengthInMin 
   from fn_newlesson(@sid,@remove_secid , @add_secid) AS L1 
   inner join fn_newlesson(@sid,@remove_secid , @add_secid)  as L2 on L1.SECID != L2.SECID
   WHERE L1.day = L2.day 
    and 
    (
        (L1.Hour  >= l2.Hour and L1.Hour < L2.Hour + cast (L2.LengthInMin as real)/60  )     or 
        (L1.Hour + cast (L1.LengthInMin as real)/60  >= l2.Hour and L1.Hour + cast (L1.LengthInMin as real)/60   < L2.Hour + cast (L2.LengthInMin as real)/60  )     or
        (L2.Hour  >= l1.Hour and L2.Hour < L1.Hour + cast (L1.LengthInMin as real)/60  )    or
        (L2.Hour + cast (L2.LengthInMin as real)/60  >= l1.Hour and L2.Hour + cast (L2.LengthInMin as real)/60   < L1.Hour + cast (L1.LengthInMin as real)/60  ) 
    )
    and   dbo.fn_canaccess(@sid ) =1
);

GO
/****** Object:  Table [dbo].[Prerequisite]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Prerequisite](
	[CID] [nvarchar](256) NOT NULL,
	[MUSTCID] [nvarchar](256) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[CID] ASC,
	[MUSTCID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_courseviolation]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_courseviolation] (@sid int,@cid nvarchar(256))
RETURNS TABLE
AS
RETURN
(   
    select MUSTCID AS PreconditionCourse from Prerequisite where CID = @cid
    and MUSTCID not 
    in( SELECT CID from Enrollment inner join Section on Section.SECID = Enrollment.SECID where Completed = 1 and SID = @sid)    
    and dbo.fn_canaccess(@sid ) =1
);

GO
/****** Object:  Table [dbo].[ExchangeRequest]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExchangeRequest](
	[RID] [int] IDENTITY(1,1) NOT NULL,
	[SID] [int] NULL,
	[SECID_Src] [int] NULL,
	[SECID_Dest] [int] NULL,
	[RequestTime] [datetime] NULL,
	[IsActive] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[RID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_match]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_match] ()
RETURNS TABLE
AS
RETURN
(
   select S1.Name AS Student1, E1.SID AS SID1, C1.CID AS Course_IN ,E2.SECID_Src as Section_IN ,
          C2.CID AS Course_OUT,E1.SECID_Src as Section_OUT,S2.Name AS Student2,E2.SID AS SID2
   from ExchangeRequest as E1 
   inner join ExchangeRequest as E2 on E1.SID != E2.SID and E1.SECID_Src = E2.SECID_Dest and  E2.SECID_Src = E1.SECID_Dest
   inner join Student AS S1 on E1.SID = S1.SID
   inner join Student AS S2 on E2.SID = S2.SID
   inner join Section AS SEC1 on E1.SECID_Src = SEC1.SECID
   inner join Section AS SEC2 on E2.SECID_Src = SEC2.SECID
   inner join Course AS C1 on C1.CID = SEC1.CID
   inner join Course AS C2 on C2.CID = SEC2.CID
   where E1.IsActive = 1 AND E2.IsActive = 1 
);

GO
/****** Object:  UserDefinedFunction [dbo].[fn_course]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_course] ()
RETURNS TABLE
AS
RETURN
(
  SELECT * from course
);

GO
/****** Object:  UserDefinedFunction [dbo].[fn_exchangeRequest]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_exchangeRequest] ()
RETURNS TABLE
AS
RETURN
  select (case WHEN IS_ROLEMEMBER ('db_owner') = 1 then SID else null END)AS SID , 
  SECID_Src,SEC1.Name AS SectionName_Src,SECID_Dest,SEC2.Name AS SectionName_Dest,RequestTime , IsActive
  from ExchangeRequest as E 
  inner join Section as SEC1 ON SEC1.SECID = E.SECID_Src
  inner join Section as SEC2 ON SEC2.SECID = E.SECID_Dest
  where dbo.fn_canaccess(SID ) =1

GO
/****** Object:  UserDefinedFunction [dbo].[fn_prerequisite]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_prerequisite] ()
RETURNS TABLE
AS
RETURN
(    
        SELECT * from Prerequisite
);


GO
/****** Object:  UserDefinedFunction [dbo].[fn_Section]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_Section] ()
RETURNS TABLE
AS
RETURN
(    
        SELECT SECID,CID As Course,SemesterName,SemesterYear,Instructor ,Name from  Section
);


ALTER TABLE [dbo].[Enrollment]  WITH CHECK ADD FOREIGN KEY([SECID])
REFERENCES [dbo].[Section] ([SECID])
GO
ALTER TABLE [dbo].[Enrollment]  WITH CHECK ADD FOREIGN KEY([SID])
REFERENCES [dbo].[Student] ([SID])
GO
ALTER TABLE [dbo].[ExchangeRequest]  WITH CHECK ADD FOREIGN KEY([SECID_Dest])
REFERENCES [dbo].[Section] ([SECID])
GO
ALTER TABLE [dbo].[ExchangeRequest]  WITH CHECK ADD FOREIGN KEY([SECID_Src])
REFERENCES [dbo].[Section] ([SECID])
GO
ALTER TABLE [dbo].[ExchangeRequest]  WITH CHECK ADD FOREIGN KEY([SID])
REFERENCES [dbo].[Student] ([SID])
GO
ALTER TABLE [dbo].[Lesson]  WITH CHECK ADD FOREIGN KEY([SECID])
REFERENCES [dbo].[Section] ([SECID])
GO
ALTER TABLE [dbo].[Prerequisite]  WITH CHECK ADD FOREIGN KEY([MUSTCID])
REFERENCES [dbo].[Course] ([CID])
GO
ALTER TABLE [dbo].[Prerequisite]  WITH CHECK ADD FOREIGN KEY([CID])
REFERENCES [dbo].[Course] ([CID])
GO
ALTER TABLE [dbo].[Section]  WITH CHECK ADD FOREIGN KEY([CID])
REFERENCES [dbo].[Course] ([CID])
GO
ALTER TABLE [dbo].[Enrollment]  WITH CHECK ADD CHECK  (([Completed]=(0) OR [Completed]=(1)))
GO
ALTER TABLE [dbo].[Lesson]  WITH CHECK ADD CHECK  (([Day]='Sat' OR [Day]='Fri' OR [Day]='Thu' OR [Day]='Wed' OR [Day]='Tue' OR [Day]='Mon' OR [Day]='Sun'))
GO
ALTER TABLE [dbo].[Lesson]  WITH CHECK ADD CHECK  (([Hour]>=(0.0) AND [Hour]<(24.0)))
GO
ALTER TABLE [dbo].[Lesson]  WITH CHECK ADD CHECK  (([LengthInMin]>(0) AND [LengthInMin]<(120)))
GO
/****** Object:  StoredProcedure [dbo].[sp_cancel_request]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_cancel_request] @sid int
AS
    BEGIN
        IF(dbo.fn_canaccess (@sid ) = 0)
            BEGIN
               RAISERROR(N'You dont have the premision to perfom the operation' , 1, 16)
               RETURN
            END

         delete from ExchangeRequest where SID = @sid
    END      


GO
/****** Object:  StoredProcedure [dbo].[sp_exchange_request]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- reuest to change sections
-- @sid - the requsting students 
-- @remove_secid - section to ove out from 
-- @add_secid - section to add
CREATE PROC [dbo].[sp_exchange_request] @sid int, @remove_secid int,@add_secid int
AS
    BEGIN
        DECLARE @timeconflicts int;
        DECLARE @cid nvarchar(256); 
        DECLARE @cid2 nvarchar(256); 
        DECLARE @anyrecord int;

        -- grab the course for the sections
        SET  @cid   = (select CID from Section where SECID = @add_secid );
        SET  @cid2   = (select CID from Section where SECID = @remove_secid );

        -- check premisions - only admin canrun this code
        IF(dbo.fn_canaccess (@sid ) = 0)
            BEGIN
               RAISERROR(N'You dont have the permission to perfom the operation' , 1, 16)
               RETURN
            END

        -- Prevent mutiple exchangebrequest for the same user
        SET  @anyrecord   = (select count(*) from ExchangeRequest where SID = @sid and IsActive=1); 
        IF (@anyrecord > 0)
            BEGIN
               RAISERROR(N'Exchange request failed because the student already has an active request' , 1, 16)
               RETURN
            END
        
        -- Prevent exchanging a section the student is not enrolled to
        SET  @anyrecord   = (select count(*) from Enrollment where SID = @sid and SECID =  @remove_secid and Completed=0); 
        IF (@anyrecord = 0)
            BEGIN
               RAISERROR(N'Exchange request failed because the student is not enrolled to Section %d, course %s' , 1, 16,@remove_secid,@cid2)
               RETURN
            END

        -- Prevent getting into a section that does not exists 
        SET  @anyrecord   = (select count(*) from Section where SECID =  @add_secid );      
        IF (@anyrecord  = 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the reuested Section %d does not exist ' , 1, 16,@add_secid)
                RETURN
            END
        
        -- Prevent getting into a section the student is already  enrolled to 
        SET  @anyrecord   = (select count(*) from Enrollment where SECID =  @add_secid and Completed = 0 and SID = @sid);      
        IF (@anyrecord  > 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the the student is already enrolled to  Section %d, course %s  ' , 1, 16,@add_secid,@cid)
                RETURN
            END
        
        -- Prevent getting into a section the student if the student already completed  this course
         SET  @anyrecord   = (select count(*) from Enrollment where SECID =  @add_secid and Completed = 1 and SID = @sid);      
        IF (@anyrecord  > 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the the student  already completed the Section %d, course %s  ' , 1, 16,@add_secid,@cid)
                RETURN
            END

        -- Prevent time conflict 
        SET @timeconflicts = 
        (
            SELECT 
            COUNT(*) FROM 
            fn_timeconflict(@sid,@remove_secid,@add_secid)
        ) 
        IF (@timeconflicts > 0)
            BEGIN
              RAISERROR(N'Exchange request failed because of a time conflict', 1, 10)
              RETURN
            END
            
        ELSE
        BEGIN 
            DECLARE @courseconflict int;
            SET @courseconflict =  (SELECT COUNT(*) FROM  fn_courseviolation(@sid,@cid));            

             -- Prevent pre requisite violation             
            IF (@courseconflict > 0)
            BEGIN
              RAISERROR(N'Exchange request failed because the student did not have one or more a prerequisite to course %s', 1, 16,@cid)
              RETURN
            END
            ELSE 
            BEGIN 
               insert into ExchangeRequest (SID,SECID_Src,SECID_Dest,RequestTime,IsActive) values(@sid,@remove_secid,@add_secid,GETDATE(),1)
               select * from ExchangeRequest where SID = @sid
            END
        END
    END        


GO
/****** Object:  StoredProcedure [dbo].[sp_swap]    Script Date: 10/10/2020 2:06:26 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_swap] 
AS
    BEGIN
   
    declare @history nvarchar(max);
    set @history = ''
    
        declare @SID1 int
        declare @SID2 int
        declare @Section_IN int
        declare @Section_OUT int

        -- Security check 
        IF(IS_ROLEMEMBER ('db_owner')  = 0)
            BEGIN
                RAISERROR(N'You dont have the permission to perfom the operation' , 1, 16)
                RETURN
            END
        
         -- Get all matches are save them into a temp table 
        select * into #tempmatch  from fn_match()

         -- Declare an dopen cursor over the matches 
        DECLARE match CURSOR FOR SELECT SID1, SID2,Section_IN,Section_OUT from #tempmatch
        OPEN match;

        -- Go over the matches record by record      
        FETCH NEXT FROM match INTO 
                @SID1, 
                @SID2,
                @Section_IN,
                @Section_OUT 

        WHILE @@FETCH_STATUS = 0        

            BEGIN
                    --Make sure we skip students we already processed     
                    IF( CHARINDEX(CAST(@SID1 AS varchar),@history) = 0 and  CHARINDEX(CAST(@SID2 AS varchar),@history) = 0  )
                    BEGIN 
                    --swap the sections between students ina transaction, mark thr request as processed 
                        BEGIN  TRAN
                        PRINT 'Swaping Section for students ' + CAST(@SID1 AS varchar) + ',' +CAST(@SID2 AS varchar) +   ', Section ' +  CAST(@Section_OUT AS varchar) + ' for ' + CAST(@Section_IN AS varchar)
                        update Enrollment set SECID = @Section_IN WHERE SECID = @Section_OUT AND SID = @SID1 
                        update Enrollment set SECID = @Section_Out WHERE SECID = @Section_IN AND SID = @SID2                            
                        update ExchangeRequest set  IsActive = 0 where SID in  (@SID1 ,@SID2)
                        COMMIT 
                    END  
                    -- Add the students to the list of processed students.     
                        set @history = @history + CAST(@SID2 AS varchar) + ',' + CAST(@SID2 AS varchar)

                        --Read next matching record
                        FETCH NEXT FROM match INTO 
                            @SID1, 
                            @SID2,
                            @Section_IN,
                            @Section_OUT 
                            
            END;        
            close match
            DEALLOCATE match                
             
    END        


GO

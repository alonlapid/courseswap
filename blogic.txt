SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[sp_exchange_request] @sid int, @remove_clid int,@add_clid int
AS
    BEGIN
        DECLARE @timeconflicts int;
        DECLARE @cid nvarchar(256); 
        DECLARE @cid2 nvarchar(256); 
        DECLARE @anyrecord int;
        SET  @cid   = (select CID from Class where CLID = @add_clid );
        SET  @cid2   = (select CID from Class where CLID = @remove_clid );

        IF(dbo.fn_canaccess (@sid ) = 0)
            BEGIN
               RAISERROR(N'You dont have the permission to perfom the operation' , 1, 16)
               RETURN
            END


        SET  @anyrecord   = (select count(*) from ExchangeRequest where SID = @sid and IsActive=1); 
        IF (@anyrecord > 0)
            BEGIN
               RAISERROR(N'Exchange request failed because the student already has an active request' , 1, 16)
               RETURN
            END

        

        SET  @anyrecord   = (select count(*) from Enrollment where SID = @sid and CLID =  @remove_clid and Completed=0); 
        IF (@anyrecord = 0)
            BEGIN
               RAISERROR(N'Exchange request failed because the student is not enrolled to class %d, course %s' , 1, 16,@remove_clid,@cid2)
               RETURN
            END
         
        SET  @anyrecord   = (select count(*) from Class where CLID =  @add_clid );      
        IF (@anyrecord  = 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the reuested class %d does not exist ' , 1, 16,@add_clid)
                RETURN
            END
        
        SET  @anyrecord   = (select count(*) from Enrollment where CLID =  @add_clid and Completed = 0 and SID = @sid);      
        IF (@anyrecord  > 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the the student is already enrolled to  class %d, course %s  ' , 1, 16,@add_clid,@cid)
                RETURN
            END
        
         SET  @anyrecord   = (select count(*) from Enrollment where CLID =  @add_clid and Completed = 1 and SID = @sid);      
        IF (@anyrecord  > 0)
            BEGIN
                RAISERROR(N'Exchange request failed because the the student  already completed the class %d, course %s  ' , 1, 16,@add_clid,@cid)
                RETURN
            END

        SET @timeconflicts = 
        (
            SELECT 
            COUNT(*) FROM 
            fn_timeconflict(@sid,@remove_clid,@add_clid)
        ) 
        IF (@timeconflicts > 0)
            BEGIN
              RAISERROR(N'Exchange request failed because of a time conflict', 1, 10)
              RETURN
            END
            
        ELSE
        BEGIN 
            DECLARE @courseconflict int;
            SET @courseconflict =  (SELECT COUNT(*) FROM  fn_courseviolation(@sid,@cid));            
                        
            IF (@courseconflict > 0)
            BEGIN
              RAISERROR(N'Exchange request failed because the student did not have one or more a prerequisite to course %s', 1, 16,@cid)
              RETURN
            END
            ELSE 
            BEGIN 
               insert into ExchangeRequest (SID,CLID_Src,CLID_Dest,RequestTime,IsActive) values(@sid,@remove_clid,@add_clid,GETDATE(),1)
               select * from ExchangeRequest where SID = @sid
            END
        END
    END        

GO

    
    
   SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_courseviolation] (@sid int,@cid nvarchar(256))
RETURNS TABLE
AS
RETURN
(   
    select MUSTCID AS PreconditionCourse from Prerequisite where CID = @cid
    and MUSTCID not 
    in( SELECT CID from Enrollment inner join Class on Class.CLID = Enrollment.CLID where Completed = 1 and SID = @sid)
);
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_credit] ()
RETURNS TABLE
AS
RETURN
(
  SELECT student.name as StudentName,Course.Name as CourseName,Course.CID from enrollment 
  INNER JOIN Class on Enrollment.CLID = Class.CLID 
  INNER JOIN Course on Course.CID = Class.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 1 
);
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_enrollment] ()
RETURNS TABLE
AS
RETURN
  SELECT student.name as StudentName,Course.Name as CourseName,Course.CID,Class.Instructor from enrollment 
  INNER JOIN Class on Enrollment.CLID = Class.CLID 
  INNER JOIN Course on Course.CID = Class.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 0 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fn_lesson] (@clid int)
RETURNS TABLE
AS
RETURN
(    
        select 
        Course.CID AS Course,Instructor, Location,Day,Hour,LengthInMin from Lesson 
        inner join Class on Lesson.CLID = Class.CLID 
        inner join Course on Course.CID = Class.CID 
        where Class.CLID = @clid 
);
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_credit] ()
RETURNS TABLE
AS
RETURN
(
  SELECT student.name as StudentName,Course.Name as CourseName,Course.CID from enrollment 
  INNER JOIN Class on Enrollment.CLID = Class.CLID 
  INNER JOIN Course on Course.CID = Class.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 1 
);
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_enrollment] ()
RETURNS TABLE
AS
RETURN
  SELECT student.name as StudentName,Course.Name as CourseName,Course.CID,Class.Instructor from enrollment 
  INNER JOIN Class on Enrollment.CLID = Class.CLID 
  INNER JOIN Course on Course.CID = Class.CID
  INNER JOIN student on student.SID = Enrollment.SID
  where completed = 0 
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_newlesson] (@sid int,@remove_clid int, @add_clid int)
RETURNS TABLE
AS
RETURN
(   
         select 
        course.CID,Lesson.* from Lesson 
        inner join Class on Class.CLID = Lesson.CLID
        inner join EnrolLment on Class.CLID = EnrolLment.CLID
        inner join Student  on Enrollment.SID = Student.SID 
        inner join course on course.CID = Class.CID 
        where Class.CLID != @remove_clid   and Student.SID = @sid
        and EnrolLment.Completed = 0

        union all 
        select course.CID,Lesson.* from Lesson 
        inner join Class on Class.CLID = Lesson.CLID
        inner join course on course.CID = Class.CID 
        where Class.CLID = @add_clid
);
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[fn_timeconflict] (@sid int,@remove_clid int, @add_clid int)
RETURNS TABLE
AS
RETURN
(
   select L1.CID AS Course1,L1.Day  AS Class1_Day, L1.Hour AS Class1_Hour,L1.LengthInMin as Class1_LengthInMin ,
          L2.CID AS Course2,L2.Day  AS Class2_Day, L2.Hour AS Class2_Hour,L2.LengthInMin as Class2_LengthInMin 
   from fn_newlesson(@sid,@remove_clid , @add_clid) AS L1 
   inner join fn_newlesson(@sid,@remove_clid , @add_clid)  as L2 on L1.CLID != L2.CLID
   WHERE L1.day = L2.day 
    and 
    (
        (L1.Hour  >= l2.Hour and L1.Hour < L2.Hour + cast (L2.LengthInMin as real)/60  )     or 
        (L1.Hour + cast (L1.LengthInMin as real)/60  >= l2.Hour and L1.Hour + cast (L1.LengthInMin as real)/60   < L2.Hour + cast (L2.LengthInMin as real)/60  )     or
        (L2.Hour  >= l1.Hour and L2.Hour < L1.Hour + cast (L1.LengthInMin as real)/60  )    or
        (L2.Hour + cast (L2.LengthInMin as real)/60  >= l1.Hour and L2.Hour + cast (L2.LengthInMin as real)/60   < L1.Hour + cast (L1.LengthInMin as real)/60  ) 
    )
);

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[sp_swap] 
AS
    BEGIN
    select * into #tempmatch  from fn_match()
    declare @history nvarchar(max);
    set @history = ''
    
        declare @SID1 int
        declare @SID2 int
        declare @Class_IN int
        declare @Class_OUT int

        IF(IS_ROLEMEMBER ('db_owner')  = 0)
            BEGIN
                RAISERROR(N'You dont have the permission to perfom the operation' , 1, 16)
                RETURN
            END
        
        
            DECLARE match CURSOR FOR SELECT SID1, SID2,Class_IN,Class_OUT from #tempmatch
            OPEN match;
                    
            FETCH NEXT FROM match INTO 
                    @SID1, 
                    @SID2,
                    @Class_IN,
                    @Class_OUT 

            WHILE @@FETCH_STATUS = 0        

                BEGIN
                        
                        IF( CHARINDEX(CAST(@SID1 AS varchar),@history) = 0 and  CHARINDEX(CAST(@SID2 AS varchar),@history) = 0  )
                        BEGIN 
                            BEGIN  TRAN
                            PRINT 'Swaping class for students ' + CAST(@SID1 AS varchar) + ',' +CAST(@SID2 AS varchar) +   ', class ' +  CAST(@Class_OUT AS varchar) + ' for ' + CAST(@Class_IN AS varchar)
                            update Enrollment set CLID = @Class_IN WHERE CLID = @Class_OUT AND SID = @SID1 
                            update Enrollment set CLID = @Class_Out WHERE CLID = @Class_IN AND SID = @SID2                            
                            update ExchangeRequest set  IsActive = 0 where SID in  (@SID1 ,@SID2)
                            COMMIT 
                        END      
                            set @history = @history + CAST(@SID2 AS varchar) + ',' + CAST(@SID2 AS varchar)
                            FETCH NEXT FROM match INTO 
                                @SID1, 
                                @SID2,
                                @Class_IN,
                                @Class_OUT 
                             
                END;        
                close match
                DEALLOCATE match                
             
    END        

GO







 
  
